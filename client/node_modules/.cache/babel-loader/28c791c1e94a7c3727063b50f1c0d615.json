{"ast":null,"code":"import { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nvar _jsxFileName = \"/Users/filipsundgren/Projects/Ethereum/dapp/client/src/components/Video.js\",\n    _s = $RefreshSig$();\n\nimport React, { useState, useEffect } from 'react'; //import Web3 from \"web3\";\n\nimport DVideo from \"./../contracts/DVideo.json\";\nimport getWeb3 from \"./../web3/getWeb3\";\n\nconst ipfsClient = require('ipfs-http-client');\n\nconst ipfs = ipfsClient({\n  host: 'ipfs.infura.io',\n  port: 5001,\n  protocol: 'https'\n});\n\nconst Video = () => {\n  _s();\n\n  const [appState, setAppState] = useState({\n    contractString: \"\",\n    web3: {},\n    accounts: {},\n    contract: {}\n  });\n  const [videoState, setVideoState] = useState({\n    buffer: null,\n    size: null\n  });\n  const [message, setMessage] = useState(\"\"); // state = { storageValue: 0, web3: null, accounts: null, contract: null };\n\n  useEffect(() => {\n    initSetup();\n  }, []);\n\n  const initSetup = async () => {\n    try {\n      // Get network provider and web3 instance.\n      const web3 = await getWeb3(); // console.log(\"get web3: \", web3);\n      // Use web3 to get the user's accounts.\n\n      const accounts = await web3.eth.getAccounts(); // Get the contract instance.\n\n      const networkId = await web3.eth.net.getId();\n      const deployedNetwork = await DVideo.networks[networkId]; //load in the contract\n\n      const instance = await new web3.eth.Contract(DVideo.abi, deployedNetwork && deployedNetwork.address //only if deployedNetwork exists\n      );\n      setAppState(prevState => {\n        return { ...prevState,\n          web3: web3\n        };\n      });\n      setAppState(prevState => {\n        return { ...prevState,\n          accounts: accounts\n        };\n      });\n      setAppState(prevState => {\n        return { ...prevState,\n          contract: instance\n        };\n      });\n    } catch (err) {\n      // Catch any errors for any of the above operations.\n      console.log(\"error man: \", err);\n    }\n  };\n\n  const insertString = async e => {\n    e.preventDefault();\n    console.log(`inserting the message '${message}' into contract`);\n    var res = await appState.contract.methods.set(message).send({\n      from: appState.accounts[0]\n    });\n    console.log(\"res: \", res);\n  };\n\n  const readString = async () => {\n    const response = await appState.contract.methods.myString().call();\n    setAppState(prevState => {\n      return { ...prevState,\n        contractString: response\n      };\n    });\n    alert(`Contract string is: ${response}`);\n  };\n\n  const setFile = async e => {\n    e.preventDefault();\n    const file = e.target.files[0];\n    console.log(\"file: \", file);\n    console.log(\"file size(MB): \", file.size / 1000000);\n    const reader = new window.FileReader();\n    console.log(\"reader: \", reader);\n    await reader.readAsArrayBuffer(file);\n\n    reader.onloadend = () => {\n      setAppState(prevState => {\n        return { ...prevState,\n          buffer: Buffer(reader.result),\n          size: file.size\n        };\n      });\n      console.log(\"buffer: \", appState.buffer);\n    };\n  };\n\n  const uploadVideo = async e => {\n    e.preventDefault();\n    console.log(\"buffer is: \", appState.buffer); // console.log(\"ipfs: \", ipfs);\n\n    ipfs.add(appState.buffer).then(res => {\n      console.log(\"ipfs RES: \", res);\n    });\n  }; //\"QmNh4HXE5sPA1s9pGEnAkmBG4H4bdUbBwxhStnEA2AWswG\"\n\n\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: !appState.web3 ? /*#__PURE__*/_jsxDEV(\"div\", {\n      children: \"Loading Web3, accounts, and contract...\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 114,\n      columnNumber: 25\n    }, this) : /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"App\",\n      children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n        children: \"Upload video!\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 117,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"file\",\n        accept: \".mp4, .mov, .ogg, .wmv\",\n        onChange: setFile\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 118,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: uploadVideo,\n        children: \"Upload\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 119,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: () => window.alert(videoState.size),\n        children: \"Show size\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 120,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"video-cont\",\n        children: /*#__PURE__*/_jsxDEV(\"video\", {\n          playsInline: true,\n          disablePictureInPicture: true,\n          autoload: \"true\",\n          controls: true,\n          children: /*#__PURE__*/_jsxDEV(\"source\", {\n            src: \"https://ipfs.infura.io/ipfs/QmNh4HXE5sPA1s9pGEnAkmBG4H4bdUbBwxhStnEA2AWswG\",\n            type: \"video/mp4\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 124,\n            columnNumber: 15\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 123,\n          columnNumber: 13\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 122,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 116,\n      columnNumber: 9\n    }, this)\n  }, void 0, false);\n};\n\n_s(Video, \"HFeJ4O8ret14dUSJP7sXLIh7gOU=\");\n\n_c = Video;\nexport default Video;\n\nvar _c;\n\n$RefreshReg$(_c, \"Video\");","map":{"version":3,"sources":["/Users/filipsundgren/Projects/Ethereum/dapp/client/src/components/Video.js"],"names":["React","useState","useEffect","DVideo","getWeb3","ipfsClient","require","ipfs","host","port","protocol","Video","appState","setAppState","contractString","web3","accounts","contract","videoState","setVideoState","buffer","size","message","setMessage","initSetup","eth","getAccounts","networkId","net","getId","deployedNetwork","networks","instance","Contract","abi","address","prevState","err","console","log","insertString","e","preventDefault","res","methods","set","send","from","readString","response","myString","call","alert","setFile","file","target","files","reader","window","FileReader","readAsArrayBuffer","onloadend","Buffer","result","uploadVideo","add","then"],"mappings":"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","sourcesContent":["import React, { useState, useEffect } from 'react';\n//import Web3 from \"web3\";\nimport DVideo from \"./../contracts/DVideo.json\";\nimport getWeb3 from \"./../web3/getWeb3\";\n\nconst ipfsClient = require('ipfs-http-client')\nconst ipfs = ipfsClient({ host: 'ipfs.infura.io', port: 5001, protocol: 'https' })\n\n\nconst Video = () => {\n    const [appState, setAppState] = useState({\n        contractString: \"\",\n        web3: {},\n        accounts: {},\n        contract: {},\n    });\n\n    const [videoState, setVideoState] = useState({\n        buffer: null,\n        size: null,\n    });\n\n    const [message, setMessage] = useState(\"\");\n\n  // state = { storageValue: 0, web3: null, accounts: null, contract: null };\n    useEffect(() => {\n        initSetup();\n    }, []);\n\n\n    const initSetup = async () => {\n        try {\n          // Get network provider and web3 instance.\n          const web3 = await getWeb3();\n          // console.log(\"get web3: \", web3);\n\n          // Use web3 to get the user's accounts.\n          const accounts = await web3.eth.getAccounts();\n\n          // Get the contract instance.\n          const networkId = await web3.eth.net.getId();\n          const deployedNetwork = await DVideo.networks[networkId];\n\n          //load in the contract\n          const instance = await new web3.eth.Contract(\n            DVideo.abi,\n            deployedNetwork && deployedNetwork.address //only if deployedNetwork exists\n          );\n          setAppState(prevState => {\n              return { ...prevState, web3: web3 }\n          });\n          setAppState(prevState => {\n              return { ...prevState, accounts: accounts }\n          });\n          setAppState(prevState => {\n              return { ...prevState, contract: instance }\n          });\n        } catch (err) {\n            // Catch any errors for any of the above operations.\n            console.log(\"error man: \", err);\n        }\n    }\n\n\n    const insertString = async (e) => {\n        e.preventDefault();\n        console.log(`inserting the message '${message}' into contract`);\n        var res = await appState.contract.methods.set(message).send({from: appState.accounts[0]});\n        console.log(\"res: \", res);\n    }\n\n    const readString = async () => {\n        const response = await appState.contract.methods.myString().call();\n        setAppState(prevState => {\n            return { ...prevState, contractString: response }\n        });\n        alert(`Contract string is: ${response}`);\n    }\n\n    const setFile = async (e) => {\n        e.preventDefault();\n        const file = e.target.files[0];\n        console.log(\"file: \", file);\n        console.log(\"file size(MB): \", file.size / 1000000);\n        const reader = new window.FileReader();\n        console.log(\"reader: \", reader);\n        await reader.readAsArrayBuffer(file);\n\n        reader.onloadend = () => {\n            setAppState(prevState => {\n                return { ...prevState,\n                    buffer: Buffer(reader.result) ,\n                    size: file.size\n                }\n            });\n            console.log(\"buffer: \", appState.buffer);\n        };\n    }\n\n    const uploadVideo = async (e) => {\n        e.preventDefault();\n        console.log(\"buffer is: \", appState.buffer);\n        // console.log(\"ipfs: \", ipfs);\n        ipfs.add(appState.buffer)\n        .then(res => {\n            console.log(\"ipfs RES: \", res);\n        });\n    }\n\n//\"QmNh4HXE5sPA1s9pGEnAkmBG4H4bdUbBwxhStnEA2AWswG\"\n\n    return(\n      <>\n      {!appState.web3 ? <div>Loading Web3, accounts, and contract...</div>\n        :\n        <div className=\"App\">\n          <h3>Upload video!</h3>\n          <input type=\"file\" accept=\".mp4, .mov, .ogg, .wmv\" onChange={setFile} />\n          <button onClick={uploadVideo}>Upload</button>\n          <button onClick={() => window.alert(videoState.size)}>Show size</button>\n          {/* <button onClick={readString}>Read message</button> */}\n          <div className=\"video-cont\">\n            <video playsInline disablePictureInPicture autoload=\"true\" controls>\n              <source src=\"https://ipfs.infura.io/ipfs/QmNh4HXE5sPA1s9pGEnAkmBG4H4bdUbBwxhStnEA2AWswG\" type=\"video/mp4\" />\n            </video>\n          </div>\n        </div>\n        }\n      </>\n    )\n}\n\nexport default Video;\n"]},"metadata":{},"sourceType":"module"}