{"ast":null,"code":"'use strict';\n\nconst uint8ArrayFromString = require('uint8arrays/from-string');\n\nconst multipartRequest = require('../lib/multipart-request');\n\nconst configure = require('../lib/configure');\n\nconst toUrlSearchParams = require('../lib/to-url-search-params');\n\nconst {\n  anySignal\n} = require('any-signal');\n\nconst AbortController = require('native-abort-controller');\n\nmodule.exports = configure(api => {\n  /**\n   * @type {import('..').ImplementsMethod<'replace', import('ipfs-core/src/components/config')>}\n   */\n  const replace = async (config, options = {}) => {\n    // allow aborting requests on body errors\n    const controller = new AbortController();\n    const signal = anySignal([controller.signal, options.signal]); // @ts-ignore https://github.com/ipfs/js-ipfs-utils/issues/90\n\n    const res = await api.post('config/replace', {\n      timeout: options.timeout,\n      signal,\n      searchParams: toUrlSearchParams(options),\n      ...(await multipartRequest(uint8ArrayFromString(JSON.stringify(config)), controller, options.headers))\n    });\n    await res.text();\n  };\n\n  return replace;\n});","map":{"version":3,"sources":["/Users/filipsundgren/Projects/Ethereum/dapp/client/node_modules/ipfs-http-client/src/config/replace.js"],"names":["uint8ArrayFromString","require","multipartRequest","configure","toUrlSearchParams","anySignal","AbortController","module","exports","api","replace","config","options","controller","signal","res","post","timeout","searchParams","JSON","stringify","headers","text"],"mappings":"AAAA;;AAEA,MAAMA,oBAAoB,GAAGC,OAAO,CAAC,yBAAD,CAApC;;AACA,MAAMC,gBAAgB,GAAGD,OAAO,CAAC,0BAAD,CAAhC;;AACA,MAAME,SAAS,GAAGF,OAAO,CAAC,kBAAD,CAAzB;;AACA,MAAMG,iBAAiB,GAAGH,OAAO,CAAC,6BAAD,CAAjC;;AACA,MAAM;AAAEI,EAAAA;AAAF,IAAgBJ,OAAO,CAAC,YAAD,CAA7B;;AACA,MAAMK,eAAe,GAAGL,OAAO,CAAC,yBAAD,CAA/B;;AAEAM,MAAM,CAACC,OAAP,GAAiBL,SAAS,CAACM,GAAG,IAAI;AAChC;AACF;AACA;AACE,QAAMC,OAAO,GAAG,OAAOC,MAAP,EAAeC,OAAO,GAAG,EAAzB,KAAgC;AAC9C;AACA,UAAMC,UAAU,GAAG,IAAIP,eAAJ,EAAnB;AACA,UAAMQ,MAAM,GAAGT,SAAS,CAAC,CAACQ,UAAU,CAACC,MAAZ,EAAoBF,OAAO,CAACE,MAA5B,CAAD,CAAxB,CAH8C,CAK9C;;AACA,UAAMC,GAAG,GAAG,MAAMN,GAAG,CAACO,IAAJ,CAAS,gBAAT,EAA2B;AAC3CC,MAAAA,OAAO,EAAEL,OAAO,CAACK,OAD0B;AAE3CH,MAAAA,MAF2C;AAG3CI,MAAAA,YAAY,EAAEd,iBAAiB,CAACQ,OAAD,CAHY;AAI3C,UACE,MAAMV,gBAAgB,CAACF,oBAAoB,CAACmB,IAAI,CAACC,SAAL,CAAeT,MAAf,CAAD,CAArB,EAA+CE,UAA/C,EAA2DD,OAAO,CAACS,OAAnE,CADxB;AAJ2C,KAA3B,CAAlB;AASA,UAAMN,GAAG,CAACO,IAAJ,EAAN;AACD,GAhBD;;AAkBA,SAAOZ,OAAP;AACD,CAvByB,CAA1B","sourcesContent":["'use strict'\n\nconst uint8ArrayFromString = require('uint8arrays/from-string')\nconst multipartRequest = require('../lib/multipart-request')\nconst configure = require('../lib/configure')\nconst toUrlSearchParams = require('../lib/to-url-search-params')\nconst { anySignal } = require('any-signal')\nconst AbortController = require('native-abort-controller')\n\nmodule.exports = configure(api => {\n  /**\n   * @type {import('..').ImplementsMethod<'replace', import('ipfs-core/src/components/config')>}\n   */\n  const replace = async (config, options = {}) => {\n    // allow aborting requests on body errors\n    const controller = new AbortController()\n    const signal = anySignal([controller.signal, options.signal])\n\n    // @ts-ignore https://github.com/ipfs/js-ipfs-utils/issues/90\n    const res = await api.post('config/replace', {\n      timeout: options.timeout,\n      signal,\n      searchParams: toUrlSearchParams(options),\n      ...(\n        await multipartRequest(uint8ArrayFromString(JSON.stringify(config)), controller, options.headers)\n      )\n    })\n\n    await res.text()\n  }\n\n  return replace\n})\n"]},"metadata":{},"sourceType":"script"}