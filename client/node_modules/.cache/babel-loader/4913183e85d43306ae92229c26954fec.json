{"ast":null,"code":"import { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nvar _jsxFileName = \"/Users/filipsundgren/Projects/Ethereum/dapp/client/src/components/Connect.js\";\nimport React, { useState, useEffect } from 'react'; //import Web3 from \"web3\";\n\nimport VideoContract from \"./../contracts/VideoContract.json\";\nimport getWeb3 from \"./../web3/getWeb3\";\n\nconst Connect = props => {\n  // // state = { storageValue: 0, web3: null, accounts: null, contract: null };\n  // useEffect(() => {\n  //     initSetup();\n  // }, []);\n  const initSetup = async () => {\n    try {\n      // Get network provider and web3 instance.\n      const web3 = await getWeb3(); // console.log(\"get web3: \", web3);\n      // Use web3 to get the user's accounts.\n\n      const accounts = await web3.eth.getAccounts(); // Get the contract instance.\n\n      const networkId = await web3.eth.net.getId();\n      const deployedNetwork = await VideoContract.networks[networkId]; //load in the contract\n\n      const instance = await new web3.eth.Contract(VideoContract.abi, deployedNetwork && deployedNetwork.address //only if deployedNetwork exists\n      );\n      props.setAppState(prevState => {\n        return { ...prevState,\n          web3: web3,\n          accounts: accounts,\n          contract: instance\n        };\n      });\n    } catch (err) {\n      // Catch any errors for any of the above operations.\n      console.log(\"error man: \", err);\n    }\n  };\n\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: /*#__PURE__*/_jsxDEV(\"button\", {\n      className: \"new-btn order-profile-btn\",\n      onClick: initSetup(),\n      children: \"Request video\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 46,\n      columnNumber: 9\n    }, this)\n  }, void 0, false);\n};\n\n_c = Connect;\nexport default Connect;\n\nvar _c;\n\n$RefreshReg$(_c, \"Connect\");","map":{"version":3,"sources":["/Users/filipsundgren/Projects/Ethereum/dapp/client/src/components/Connect.js"],"names":["React","useState","useEffect","VideoContract","getWeb3","Connect","props","initSetup","web3","accounts","eth","getAccounts","networkId","net","getId","deployedNetwork","networks","instance","Contract","abi","address","setAppState","prevState","contract","err","console","log"],"mappings":";;;AAAA,OAAOA,KAAP,IAAgBC,QAAhB,EAA0BC,SAA1B,QAA2C,OAA3C,C,CACA;;AACA,OAAOC,aAAP,MAA0B,mCAA1B;AACA,OAAOC,OAAP,MAAoB,mBAApB;;AAEA,MAAMC,OAAO,GAAIC,KAAD,IAAW;AACzB;AACE;AACA;AACA;AAGA,QAAMC,SAAS,GAAG,YAAY;AAC1B,QAAI;AACF;AACA,YAAMC,IAAI,GAAG,MAAMJ,OAAO,EAA1B,CAFE,CAGF;AAEA;;AACA,YAAMK,QAAQ,GAAG,MAAMD,IAAI,CAACE,GAAL,CAASC,WAAT,EAAvB,CANE,CAQF;;AACA,YAAMC,SAAS,GAAG,MAAMJ,IAAI,CAACE,GAAL,CAASG,GAAT,CAAaC,KAAb,EAAxB;AACA,YAAMC,eAAe,GAAG,MAAMZ,aAAa,CAACa,QAAd,CAAuBJ,SAAvB,CAA9B,CAVE,CAYF;;AACA,YAAMK,QAAQ,GAAG,MAAM,IAAIT,IAAI,CAACE,GAAL,CAASQ,QAAb,CACrBf,aAAa,CAACgB,GADO,EAErBJ,eAAe,IAAIA,eAAe,CAACK,OAFd,CAEsB;AAFtB,OAAvB;AAIAd,MAAAA,KAAK,CAACe,WAAN,CAAkBC,SAAS,IAAI;AAC3B,eAAO,EAAE,GAAGA,SAAL;AACLd,UAAAA,IAAI,EAAEA,IADD;AAELC,UAAAA,QAAQ,EAAEA,QAFL;AAGLc,UAAAA,QAAQ,EAAEN;AAHL,SAAP;AAKH,OAND;AAOD,KAxBD,CAwBE,OAAOO,GAAP,EAAY;AACV;AACAC,MAAAA,OAAO,CAACC,GAAR,CAAY,aAAZ,EAA2BF,GAA3B;AACH;AACJ,GA7BD;;AA+BA,sBACE;AAAA,2BACE;AAAQ,MAAA,SAAS,EAAC,2BAAlB;AAA8C,MAAA,OAAO,EAAEjB,SAAS,EAAhE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AADF,mBADF;AAKH,CA3CD;;KAAMF,O;AA6CN,eAAeA,OAAf","sourcesContent":["import React, { useState, useEffect } from 'react';\n//import Web3 from \"web3\";\nimport VideoContract from \"./../contracts/VideoContract.json\";\nimport getWeb3 from \"./../web3/getWeb3\";\n\nconst Connect = (props) => {\n  // // state = { storageValue: 0, web3: null, accounts: null, contract: null };\n    // useEffect(() => {\n    //     initSetup();\n    // }, []);\n\n\n    const initSetup = async () => {\n        try {\n          // Get network provider and web3 instance.\n          const web3 = await getWeb3();\n          // console.log(\"get web3: \", web3);\n\n          // Use web3 to get the user's accounts.\n          const accounts = await web3.eth.getAccounts();\n\n          // Get the contract instance.\n          const networkId = await web3.eth.net.getId();\n          const deployedNetwork = await VideoContract.networks[networkId];\n\n          //load in the contract\n          const instance = await new web3.eth.Contract(\n            VideoContract.abi,\n            deployedNetwork && deployedNetwork.address //only if deployedNetwork exists\n          );\n          props.setAppState(prevState => {\n              return { ...prevState,\n                web3: web3,\n                accounts: accounts,\n                contract: instance\n              }\n          });\n        } catch (err) {\n            // Catch any errors for any of the above operations.\n            console.log(\"error man: \", err);\n        }\n    }\n\n    return (\n      <>\n        <button className=\"new-btn order-profile-btn\" onClick={initSetup()}>Request video</button>\n      </>\n    )\n}\n\nexport default Connect;\n"]},"metadata":{},"sourceType":"module"}