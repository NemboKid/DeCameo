{"ast":null,"code":"import { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nvar _jsxFileName = \"/Users/filipsundgren/Projects/Ethereum/dapp/client/src/components/Spreads.js\",\n    _s = $RefreshSig$();\n\nimport React, { useState, useEffect } from 'react'; //import Web3 from \"web3\";\n\nimport MyStringStore from \"./../contracts/MyStringStore.json\";\nimport getWeb3 from \"./../web3/getWeb3\";\nimport \"./../App.css\";\n\nfunction Product() {\n  _s();\n\n  const [appState, setAppState] = useState({\n    contractString: \"\",\n    web3: {},\n    accounts: {},\n    contract: {}\n  });\n  const [message, setMessage] = useState(\"\"); // state = { storageValue: 0, web3: null, accounts: null, contract: null };\n\n  useEffect(() => {\n    initSetup();\n  }, []);\n\n  const initSetup = async () => {\n    try {\n      // Get network provider and web3 instance.\n      const web3 = await getWeb3(); // console.log(\"get web3: \", web3);\n      // Use web3 to get the user's accounts.\n\n      const accounts = await web3.eth.getAccounts(); // Get the contract instance.\n\n      const networkId = await web3.eth.net.getId();\n      const deployedNetwork = await MyStringStore.networks[networkId];\n      const instance = await new web3.eth.Contract(MyStringStore.abi, deployedNetwork && deployedNetwork.address);\n      setAppState(prevState => {\n        return { ...prevState,\n          web3: web3\n        };\n      });\n      setAppState(prevState => {\n        return { ...prevState,\n          accounts: accounts\n        };\n      });\n      setAppState(prevState => {\n        return { ...prevState,\n          contract: instance\n        };\n      });\n    } catch (err) {\n      // Catch any errors for any of the above operations.\n      console.log(\"error man: \", err);\n    }\n  };\n\n  const insertString = async e => {\n    e.preventDefault();\n    console.log(`inserting the message '${message}' into contract`);\n    var res = await appState.contract.methods.set(message).send({\n      from: appState.accounts[0]\n    });\n    console.log(\"res: \", res);\n  };\n\n  const readString = async () => {\n    const response = await appState.contract.methods.myString().call();\n    setAppState(prevState => {\n      return { ...prevState,\n        contractString: response\n      };\n    });\n    alert(`Contract string is: ${response}`);\n  };\n\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: !appState.web3 ? /*#__PURE__*/_jsxDEV(\"div\", {\n      children: \"Loading Web3, accounts, and contract...\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 74,\n      columnNumber: 25\n    }, this) : /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"App\",\n      children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n        children: \"Checking string\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 77,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"text\",\n        onChange: e => setMessage(e.target.value)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 78,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        children: [\"Current message to insert: \", message]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 79,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: insertString,\n        children: \"Insert message\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 80,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: readString,\n        children: \"Read messag\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 81,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        children: [\"Try changing the value stored on \", /*#__PURE__*/_jsxDEV(\"strong\", {\n          children: \"line 40\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 83,\n          columnNumber: 46\n        }, this), \" of App.js.\"]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 82,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        children: [\"Contract string is: \", appState.contractString]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 85,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 76,\n      columnNumber: 9\n    }, this)\n  }, void 0, false);\n}\n\n_s(Product, \"bH2REOAC2YiqVYjdNttqUzO2Dv8=\");\n\n_c = Product;\nexport default Product;\n\nvar _c;\n\n$RefreshReg$(_c, \"Product\");","map":{"version":3,"sources":["/Users/filipsundgren/Projects/Ethereum/dapp/client/src/components/Spreads.js"],"names":["React","useState","useEffect","MyStringStore","getWeb3","Product","appState","setAppState","contractString","web3","accounts","contract","message","setMessage","initSetup","eth","getAccounts","networkId","net","getId","deployedNetwork","networks","instance","Contract","abi","address","prevState","err","console","log","insertString","e","preventDefault","res","methods","set","send","from","readString","response","myString","call","alert","target","value"],"mappings":"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","sourcesContent":["import React, { useState, useEffect } from 'react';\n//import Web3 from \"web3\";\nimport MyStringStore from \"./../contracts/MyStringStore.json\";\nimport getWeb3 from \"./../web3/getWeb3\";\n\nimport \"./../App.css\";\n\nfunction Product() {\n    const [appState, setAppState] = useState({\n        contractString: \"\",\n        web3: {},\n        accounts: {},\n        contract: {}\n    });\n\n    const [message, setMessage] = useState(\"\");\n\n  // state = { storageValue: 0, web3: null, accounts: null, contract: null };\n    useEffect(() => {\n        initSetup();\n    }, []);\n\n\n    const initSetup = async () => {\n        try {\n          // Get network provider and web3 instance.\n          const web3 = await getWeb3();\n          // console.log(\"get web3: \", web3);\n\n          // Use web3 to get the user's accounts.\n          const accounts = await web3.eth.getAccounts();\n\n          // Get the contract instance.\n          const networkId = await web3.eth.net.getId();\n          const deployedNetwork = await MyStringStore.networks[networkId];\n          const instance = await new web3.eth.Contract(\n            MyStringStore.abi,\n            deployedNetwork && deployedNetwork.address,\n          );\n          setAppState(prevState => {\n              return { ...prevState, web3: web3 }\n          });\n          setAppState(prevState => {\n              return { ...prevState, accounts: accounts }\n          });\n          setAppState(prevState => {\n              return { ...prevState, contract: instance }\n          });\n        } catch (err) {\n            // Catch any errors for any of the above operations.\n            console.log(\"error man: \", err);\n        }\n    }\n\n\n    const insertString = async (e) => {\n        e.preventDefault();\n        console.log(`inserting the message '${message}' into contract`);\n        var res = await appState.contract.methods.set(message).send({from: appState.accounts[0]});\n        console.log(\"res: \", res);\n    }\n\n    const readString = async () => {\n        const response = await appState.contract.methods.myString().call();\n        setAppState(prevState => {\n            return { ...prevState, contractString: response }\n        });\n        alert(`Contract string is: ${response}`);\n    }\n\n\n    return(\n      <>\n      {!appState.web3 ? <div>Loading Web3, accounts, and contract...</div>\n        :\n        <div className=\"App\">\n          <h3>Checking string</h3>\n          <input type=\"text\" onChange={(e) => setMessage(e.target.value)}/>\n          <p>Current message to insert: {message}</p>\n          <button onClick={insertString}>Insert message</button>\n          <button onClick={readString}>Read messag</button>\n          <p>\n            Try changing the value stored on <strong>line 40</strong> of App.js.\n          </p>\n          <div>Contract string is: {appState.contractString}</div>\n        </div>\n        }\n      </>\n    )\n}\n\nexport default Product;\n"]},"metadata":{},"sourceType":"module"}