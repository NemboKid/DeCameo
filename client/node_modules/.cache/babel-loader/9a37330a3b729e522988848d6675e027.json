{"ast":null,"code":"import { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nvar _jsxFileName = \"/Users/filipsundgren/Projects/Ethereum/dapp/client/src/App.js\",\n    _s = $RefreshSig$();\n\nimport React, { useState, useEffect } from 'react'; //import Web3 from \"web3\";\n\nimport MyStringStore from \"./contracts/MyStringStore.json\";\nimport getWeb3 from \"./web3/getWeb3\";\nimport \"./App.css\";\n\nfunction App() {\n  _s();\n\n  const [appState, setAppState] = useState({\n    contractString: \"\",\n    web3: {},\n    accounts: {},\n    contract: {}\n  }); // state = { storageValue: 0, web3: null, accounts: null, contract: null };\n\n  useEffect(() => {\n    initSetup();\n    runExample();\n  }, []);\n\n  const initSetup = async () => {\n    try {\n      // Get network provider and web3 instance.\n      const web3 = await getWeb3(); // console.log(\"get web3: \", web3);\n      // Use web3 to get the user's accounts.\n\n      const accounts = await web3.eth.getAccounts(); // Get the contract instance.\n\n      const networkId = await web3.eth.net.getId();\n      const deployedNetwork = await MyStringStore.networks[networkId];\n      const instance = await new web3.eth.Contract(MyStringStore.abi, deployedNetwork && deployedNetwork.address); // Set web3, accounts, and contract to the state, and then proceed with an\n      // example of interacting with the contract's methods.\n      // setAppState({\n      //     storageValue: 0,\n      //     web3: web3,\n      //     accounts: accounts,\n      //     contract: instance\n      // });\n\n      setAppState(prevState => {\n        return { ...prevState,\n          web3: web3\n        };\n      });\n      setAppState(prevState => {\n        return { ...prevState,\n          accounts: accounts\n        };\n      });\n      setAppState(prevState => {\n        return { ...prevState,\n          contract: instance\n        };\n      }); // console.log(\"accounts::\", accountsInit);\n      // setWeb3(web3Init);\n      // setAccounts(accountsInit);\n      // setContract(instance);\n      // console.log(web3, accounts, contract);\n      // await setAppState(prevState => ({\n      //     ...prevState,\n      //     web3: web3,\n      //     accounts: accounts,\n      //     contract: instance\n      // }));\n      // console.log(\"appState: \", appState);\n    } catch (err) {\n      // Catch any errors for any of the above operations.\n      console.log(\"error man: \", err);\n    }\n  };\n\n  const runExample = async () => {\n    console.log(\"inside runExample\"); // const { accounts, contract } = appState;\n    // Stores a given value, 5 by default.\n\n    try {\n      await appState.contract.methods.set(\"hejhej frÃ¥n kontraktet\").send({\n        from: appState.accounts[0]\n      }); // Get the value from the contract to prove it worked.\n\n      const response = await appState.contract.methods.get().call(); // Update state with the result.\n      // setAppState({\n      //     storageValue: response,\n      //     web3: appState.web3,\n      //     accounts: appState.accounts,\n      //     contract: appState.contract\n      // });\n\n      setAppState(prevState => {\n        return { ...prevState,\n          contractString: response\n        };\n      });\n      console.log(\"APPP:: \", appState); // setStorageValue(response);\n    } catch (err) {\n      console.log(\"error in runExample: \", err);\n    }\n  };\n\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: !appState.web3 ? /*#__PURE__*/_jsxDEV(\"div\", {\n      children: \"Loading Web3, accounts, and contract...\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 106,\n      columnNumber: 25\n    }, this) : /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"App\",\n      children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n        children: \"Good to Go!\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 109,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        children: \"Your Truffle Box is installed and ready.\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 110,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"h2\", {\n        children: \"Smart Contract Example\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 111,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        children: [\"Try changing the value stored on \", /*#__PURE__*/_jsxDEV(\"strong\", {\n          children: \"line 40\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 113,\n          columnNumber: 46\n        }, this), \" of App.js.\"]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 112,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        children: [\"Contract string is: \", appState.contractString]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 115,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 108,\n      columnNumber: 9\n    }, this)\n  }, void 0, false);\n}\n\n_s(App, \"gAqPQavDGG558YI1jLHjsmWZPLk=\");\n\n_c = App;\nexport default App;\n\nvar _c;\n\n$RefreshReg$(_c, \"App\");","map":{"version":3,"sources":["/Users/filipsundgren/Projects/Ethereum/dapp/client/src/App.js"],"names":["React","useState","useEffect","MyStringStore","getWeb3","App","appState","setAppState","contractString","web3","accounts","contract","initSetup","runExample","eth","getAccounts","networkId","net","getId","deployedNetwork","networks","instance","Contract","abi","address","prevState","err","console","log","methods","set","send","from","response","get","call"],"mappings":";;;;;;AAAA,OAAOA,KAAP,IAAgBC,QAAhB,EAA0BC,SAA1B,QAA2C,OAA3C,C,CACA;;AACA,OAAOC,aAAP,MAA0B,gCAA1B;AACA,OAAOC,OAAP,MAAoB,gBAApB;AAEA,OAAO,WAAP;;AAEA,SAASC,GAAT,GAAe;AAAA;;AACX,QAAM,CAACC,QAAD,EAAWC,WAAX,IAA0BN,QAAQ,CAAC;AACrCO,IAAAA,cAAc,EAAE,EADqB;AAErCC,IAAAA,IAAI,EAAE,EAF+B;AAGrCC,IAAAA,QAAQ,EAAE,EAH2B;AAIrCC,IAAAA,QAAQ,EAAE;AAJ2B,GAAD,CAAxC,CADW,CAQb;;AACET,EAAAA,SAAS,CAAC,MAAM;AACZU,IAAAA,SAAS;AACTC,IAAAA,UAAU;AACb,GAHQ,EAGN,EAHM,CAAT;;AAMA,QAAMD,SAAS,GAAG,YAAY;AAC1B,QAAI;AACF;AACA,YAAMH,IAAI,GAAG,MAAML,OAAO,EAA1B,CAFE,CAGF;AAEA;;AACA,YAAMM,QAAQ,GAAG,MAAMD,IAAI,CAACK,GAAL,CAASC,WAAT,EAAvB,CANE,CAQF;;AACA,YAAMC,SAAS,GAAG,MAAMP,IAAI,CAACK,GAAL,CAASG,GAAT,CAAaC,KAAb,EAAxB;AACA,YAAMC,eAAe,GAAG,MAAMhB,aAAa,CAACiB,QAAd,CAAuBJ,SAAvB,CAA9B;AACA,YAAMK,QAAQ,GAAG,MAAM,IAAIZ,IAAI,CAACK,GAAL,CAASQ,QAAb,CACrBnB,aAAa,CAACoB,GADO,EAErBJ,eAAe,IAAIA,eAAe,CAACK,OAFd,CAAvB,CAXE,CAgBF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACAjB,MAAAA,WAAW,CAACkB,SAAS,IAAI;AACrB,eAAO,EAAE,GAAGA,SAAL;AAAgBhB,UAAAA,IAAI,EAAEA;AAAtB,SAAP;AACH,OAFU,CAAX;AAGAF,MAAAA,WAAW,CAACkB,SAAS,IAAI;AACrB,eAAO,EAAE,GAAGA,SAAL;AAAgBf,UAAAA,QAAQ,EAAEA;AAA1B,SAAP;AACH,OAFU,CAAX;AAGAH,MAAAA,WAAW,CAACkB,SAAS,IAAI;AACrB,eAAO,EAAE,GAAGA,SAAL;AAAgBd,UAAAA,QAAQ,EAAEU;AAA1B,SAAP;AACH,OAFU,CAAX,CA9BE,CAiCF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACD,KA7CD,CA6CE,OAAOK,GAAP,EAAY;AACV;AACAC,MAAAA,OAAO,CAACC,GAAR,CAAY,aAAZ,EAA2BF,GAA3B;AACH;AACJ,GAlDD;;AAqDA,QAAMb,UAAU,GAAG,YAAY;AAC3Bc,IAAAA,OAAO,CAACC,GAAR,CAAY,mBAAZ,EAD2B,CAE3B;AAEA;;AACA,QAAI;AACA,YAAMtB,QAAQ,CAACK,QAAT,CAAkBkB,OAAlB,CAA0BC,GAA1B,CAA8B,wBAA9B,EAAwDC,IAAxD,CAA6D;AAAEC,QAAAA,IAAI,EAAE1B,QAAQ,CAACI,QAAT,CAAkB,CAAlB;AAAR,OAA7D,CAAN,CADA,CAGA;;AACA,YAAMuB,QAAQ,GAAG,MAAM3B,QAAQ,CAACK,QAAT,CAAkBkB,OAAlB,CAA0BK,GAA1B,GAAgCC,IAAhC,EAAvB,CAJA,CAMA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA5B,MAAAA,WAAW,CAACkB,SAAS,IAAI;AACrB,eAAO,EAAE,GAAGA,SAAL;AAAgBjB,UAAAA,cAAc,EAAEyB;AAAhC,SAAP;AACH,OAFU,CAAX;AAGAN,MAAAA,OAAO,CAACC,GAAR,CAAY,SAAZ,EAAuBtB,QAAvB,EAhBA,CAiBA;AACH,KAlBD,CAkBE,OAAOoB,GAAP,EAAY;AACVC,MAAAA,OAAO,CAACC,GAAR,CAAY,uBAAZ,EAAqCF,GAArC;AACH;AACJ,GA1BD;;AA4BA,sBACE;AAAA,cACC,CAACpB,QAAQ,CAACG,IAAV,gBAAiB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,YAAjB,gBAEC;AAAK,MAAA,SAAS,EAAC,KAAf;AAAA,8BACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,cADF,eAEE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,cAFF,eAGE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,cAHF,eAIE;AAAA,qEACmC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,gBADnC;AAAA;AAAA;AAAA;AAAA;AAAA,cAJF,eAOE;AAAA,2CAA0BH,QAAQ,CAACE,cAAnC;AAAA;AAAA;AAAA;AAAA;AAAA,cAPF;AAAA;AAAA;AAAA;AAAA;AAAA;AAHF,mBADF;AAgBH;;GAhHQH,G;;KAAAA,G;AAkHT,eAAeA,GAAf","sourcesContent":["import React, { useState, useEffect } from 'react';\n//import Web3 from \"web3\";\nimport MyStringStore from \"./contracts/MyStringStore.json\";\nimport getWeb3 from \"./web3/getWeb3\";\n\nimport \"./App.css\";\n\nfunction App() {\n    const [appState, setAppState] = useState({\n        contractString: \"\",\n        web3: {},\n        accounts: {},\n        contract: {}\n    });\n\n  // state = { storageValue: 0, web3: null, accounts: null, contract: null };\n    useEffect(() => {\n        initSetup();\n        runExample();\n    }, []);\n\n\n    const initSetup = async () => {\n        try {\n          // Get network provider and web3 instance.\n          const web3 = await getWeb3();\n          // console.log(\"get web3: \", web3);\n\n          // Use web3 to get the user's accounts.\n          const accounts = await web3.eth.getAccounts();\n\n          // Get the contract instance.\n          const networkId = await web3.eth.net.getId();\n          const deployedNetwork = await MyStringStore.networks[networkId];\n          const instance = await new web3.eth.Contract(\n            MyStringStore.abi,\n            deployedNetwork && deployedNetwork.address,\n          );\n\n          // Set web3, accounts, and contract to the state, and then proceed with an\n          // example of interacting with the contract's methods.\n          // setAppState({\n          //     storageValue: 0,\n          //     web3: web3,\n          //     accounts: accounts,\n          //     contract: instance\n          // });\n          setAppState(prevState => {\n              return { ...prevState, web3: web3 }\n          });\n          setAppState(prevState => {\n              return { ...prevState, accounts: accounts }\n          });\n          setAppState(prevState => {\n              return { ...prevState, contract: instance }\n          });\n          // console.log(\"accounts::\", accountsInit);\n          // setWeb3(web3Init);\n          // setAccounts(accountsInit);\n          // setContract(instance);\n          // console.log(web3, accounts, contract);\n          // await setAppState(prevState => ({\n          //     ...prevState,\n          //     web3: web3,\n          //     accounts: accounts,\n          //     contract: instance\n          // }));\n          // console.log(\"appState: \", appState);\n        } catch (err) {\n            // Catch any errors for any of the above operations.\n            console.log(\"error man: \", err);\n        }\n    }\n\n\n    const runExample = async () => {\n        console.log(\"inside runExample\");\n        // const { accounts, contract } = appState;\n\n        // Stores a given value, 5 by default.\n        try {\n            await appState.contract.methods.set(\"hejhej frÃ¥n kontraktet\").send({ from: appState.accounts[0] });\n\n            // Get the value from the contract to prove it worked.\n            const response = await appState.contract.methods.get().call();\n\n            // Update state with the result.\n            // setAppState({\n            //     storageValue: response,\n            //     web3: appState.web3,\n            //     accounts: appState.accounts,\n            //     contract: appState.contract\n            // });\n            setAppState(prevState => {\n                return { ...prevState, contractString: response }\n            });\n            console.log(\"APPP:: \", appState);\n            // setStorageValue(response);\n        } catch (err) {\n            console.log(\"error in runExample: \", err);\n        }\n    };\n\n    return(\n      <>\n      {!appState.web3 ? <div>Loading Web3, accounts, and contract...</div>\n        :\n        <div className=\"App\">\n          <h1>Good to Go!</h1>\n          <p>Your Truffle Box is installed and ready.</p>\n          <h2>Smart Contract Example</h2>\n          <p>\n            Try changing the value stored on <strong>line 40</strong> of App.js.\n          </p>\n          <div>Contract string is: {appState.contractString}</div>\n        </div>\n        }\n      </>\n    )\n}\n\nexport default App;\n"]},"metadata":{},"sourceType":"module"}