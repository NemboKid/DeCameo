{"ast":null,"code":"// import React, { useState, useEffect } from 'react';\n// //import Web3 from \"web3\";\n// import MyStringStore from \"./../contracts/MyStringStore.json\";\n// import getWeb3 from \"./../web3/getWeb3\";\n//\n// function Product() {\n//     const [appState, setAppState] = useState({\n//         contractString: \"\",\n//         web3: {},\n//         accounts: {},\n//         contract: {}\n//     });\n//\n//     const [message, setMessage] = useState(\"\");\n//\n//   // state = { storageValue: 0, web3: null, accounts: null, contract: null };\n//     useEffect(() => {\n//         initSetup();\n//     }, []);\n//\n//\n//     const initSetup = async () => {\n//         try {\n//           // Get network provider and web3 instance.\n//           const web3 = await getWeb3();\n//           // console.log(\"get web3: \", web3);\n//\n//           // Use web3 to get the user's accounts.\n//           const accounts = await web3.eth.getAccounts();\n//\n//           // Get the contract instance.\n//           const networkId = await web3.eth.net.getId();\n//           const deployedNetwork = await MyStringStore.networks[networkId];\n//\n//           //load in the contract\n//           const instance = await new web3.eth.Contract(\n//             MyStringStore.abi,\n//             deployedNetwork && deployedNetwork.address\n//           );\n//           setAppState(prevState => {\n//               return { ...prevState, web3: web3 }\n//           });\n//           setAppState(prevState => {\n//               return { ...prevState, accounts: accounts }\n//           });\n//           setAppState(prevState => {\n//               return { ...prevState, contract: instance }\n//           });\n//         } catch (err) {\n//             // Catch any errors for any of the above operations.\n//             console.log(\"error man: \", err);\n//         }\n//     }\n//\n//\n//     const insertString = async (e) => {\n//         e.preventDefault();\n//         console.log(`inserting the message '${message}' into contract`);\n//         var res = await appState.contract.methods.set(message).send({from: appState.accounts[0]});\n//         console.log(\"res: \", res);\n//     }\n//\n//     const readString = async () => {\n//         const response = await appState.contract.methods.myString().call();\n//         setAppState(prevState => {\n//             return { ...prevState, contractString: response }\n//         });\n//         alert(`Contract string is: ${response}`);\n//     }\n//\n//\n//     return(\n//       <>\n//       {!appState.web3 ? <div>Loading Web3, accounts, and contract...</div>\n//         :\n//         <div className=\"App\">\n//           <h3>Checking string</h3>\n//           <input type=\"text\" onChange={(e) => setMessage(e.target.value)}/>\n//           <p>Current message to insert: {message}</p>\n//           <button onClick={insertString}>Insert message</button>\n//           <button onClick={readString}>Read messag</button>\n//           <p>\n//             Try changing the value stored on <strong>line 40</strong> of App.js.\n//           </p>\n//           <div>Contract string is: {appState.contractString}</div>\n//         </div>\n//         }\n//       </>\n//     )\n// }\n//\n// export default Product;","map":{"version":3,"sources":["/Users/filipsundgren/Projects/Ethereum/dapp/client/src/components/Product.js"],"names":[],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA","sourcesContent":["// import React, { useState, useEffect } from 'react';\n// //import Web3 from \"web3\";\n// import MyStringStore from \"./../contracts/MyStringStore.json\";\n// import getWeb3 from \"./../web3/getWeb3\";\n//\n// function Product() {\n//     const [appState, setAppState] = useState({\n//         contractString: \"\",\n//         web3: {},\n//         accounts: {},\n//         contract: {}\n//     });\n//\n//     const [message, setMessage] = useState(\"\");\n//\n//   // state = { storageValue: 0, web3: null, accounts: null, contract: null };\n//     useEffect(() => {\n//         initSetup();\n//     }, []);\n//\n//\n//     const initSetup = async () => {\n//         try {\n//           // Get network provider and web3 instance.\n//           const web3 = await getWeb3();\n//           // console.log(\"get web3: \", web3);\n//\n//           // Use web3 to get the user's accounts.\n//           const accounts = await web3.eth.getAccounts();\n//\n//           // Get the contract instance.\n//           const networkId = await web3.eth.net.getId();\n//           const deployedNetwork = await MyStringStore.networks[networkId];\n//\n//           //load in the contract\n//           const instance = await new web3.eth.Contract(\n//             MyStringStore.abi,\n//             deployedNetwork && deployedNetwork.address\n//           );\n//           setAppState(prevState => {\n//               return { ...prevState, web3: web3 }\n//           });\n//           setAppState(prevState => {\n//               return { ...prevState, accounts: accounts }\n//           });\n//           setAppState(prevState => {\n//               return { ...prevState, contract: instance }\n//           });\n//         } catch (err) {\n//             // Catch any errors for any of the above operations.\n//             console.log(\"error man: \", err);\n//         }\n//     }\n//\n//\n//     const insertString = async (e) => {\n//         e.preventDefault();\n//         console.log(`inserting the message '${message}' into contract`);\n//         var res = await appState.contract.methods.set(message).send({from: appState.accounts[0]});\n//         console.log(\"res: \", res);\n//     }\n//\n//     const readString = async () => {\n//         const response = await appState.contract.methods.myString().call();\n//         setAppState(prevState => {\n//             return { ...prevState, contractString: response }\n//         });\n//         alert(`Contract string is: ${response}`);\n//     }\n//\n//\n//     return(\n//       <>\n//       {!appState.web3 ? <div>Loading Web3, accounts, and contract...</div>\n//         :\n//         <div className=\"App\">\n//           <h3>Checking string</h3>\n//           <input type=\"text\" onChange={(e) => setMessage(e.target.value)}/>\n//           <p>Current message to insert: {message}</p>\n//           <button onClick={insertString}>Insert message</button>\n//           <button onClick={readString}>Read messag</button>\n//           <p>\n//             Try changing the value stored on <strong>line 40</strong> of App.js.\n//           </p>\n//           <div>Contract string is: {appState.contractString}</div>\n//         </div>\n//         }\n//       </>\n//     )\n// }\n//\n// export default Product;\n"]},"metadata":{},"sourceType":"module"}