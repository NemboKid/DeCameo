{"ast":null,"code":"import { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nvar _jsxFileName = \"/Users/filipsundgren/Projects/Ethereum/dapp/client/src/App.js\",\n    _s = $RefreshSig$();\n\nimport React, { useState, useEffect } from 'react'; //import Web3 from \"web3\";\n\nimport MyStringStore from \"./contracts/MyStringStore.json\";\nimport getWeb3 from \"./getWeb3\";\nimport \"./App.css\";\n\nconst App = () => {\n  _s();\n\n  const [appState, setAppState] = useState({\n    storageValue: 0,\n    web3: null,\n    accounts: null,\n    contract: null\n  }); // const [storageValue, setStorageValue] = useState(0);\n  // const [web3, setWeb3] = useState(\"\");\n  // const [accounts, setAccounts] = useState(\"\");\n\n  const [contract, setContract] = useState(\"Nisse\"); // state = { storageValue: 0, web3: null, accounts: null, contract: null };\n\n  useEffect(() => {\n    setContract(\"Lars\");\n    initSetup();\n  }, []);\n\n  const initSetup = async () => {\n    try {\n      // Get network provider and web3 instance.\n      const web3 = await getWeb3(); // console.log(\"get web3: \", web3);\n      // Use web3 to get the user's accounts.\n\n      const accounts = await web3.eth.getAccounts(); // Get the contract instance.\n\n      const networkId = await web3.eth.net.getId();\n      const deployedNetwork = await MyStringStore.networks[networkId];\n      const instance = await new web3.eth.Contract(MyStringStore.abi, deployedNetwork && deployedNetwork.address); // console.log(\"instance: \", instance);\n      // console.log(\"accounts: \", accounts);\n      // console.log(\"web3: \", web3);\n      // Set web3, accounts, and contract to the state, and then proceed with an\n      // example of interacting with the contract's methods.\n      // setAppState({\n      //     storageValue: 0,\n      //     web3: web3,\n      //     accounts: accounts,\n      //     contract: instance\n      // });\n      // setAppState(prevState => {\n      //     return { ...prevState, web3: web3 }\n      // });\n      // setAppState(prevState => {\n      //     return { ...prevState, accounts: accounts }\n      // });\n      // setAppState(prevState => {\n      //     return { ...prevState, contract: instance }\n      // });\n      // console.log(\"accounts::\", accountsInit);\n      // setWeb3(web3Init);\n      // setAccounts(accountsInit);\n      // setContract(instance);\n      // console.log(web3, accounts, contract);\n\n      await setAppState(prevState => ({ ...prevState,\n        storageValue: 0,\n        web3: web3,\n        accounts: accounts,\n        contract: instance\n      }));\n      setContract(\"hejdÃ¥\"); // console.log(\"appState: \", appState);\n\n      runExample();\n    } catch (err) {\n      // Catch any errors for any of the above operations.\n      console.log(\"error man: \", err);\n    }\n  };\n\n  const runExample = async () => {\n    console.log(\"inside runExample\"); // const { accounts, contract } = appState;\n\n    console.log(\"loggar:: \", appState);\n    console.log(\"contrac:: \", contract); // Stores a given value, 5 by default.\n\n    try {\n      // console.log(\"appState: \", appState);\n      await appState.contract.methods.set(5).send({\n        from: appState.accounts[0]\n      }); // Get the value from the contract to prove it worked.\n\n      const response = await appState.contract.methods.get().call(); // Update state with the result.\n      // setAppState({\n      //     storageValue: response,\n      //     web3: appState.web3,\n      //     accounts: appState.accounts,\n      //     contract: appState.contract\n      // });\n\n      setAppState(prevState => {\n        return { ...prevState,\n          storageValue: response\n        };\n      }); // setStorageValue(response);\n    } catch (err) {\n      console.log(\"error in runExample: \", err);\n    }\n  };\n\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: !appState.web3 ? /*#__PURE__*/_jsxDEV(\"div\", {\n      children: \"Loading Web3, accounts, and contract...\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 119,\n      columnNumber: 25\n    }, this) : /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"App\",\n      children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n        children: \"Good to Go!\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 122,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        children: \"Your Truffle Box is installed and ready.\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 123,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"h2\", {\n        children: \"Smart Contract Example\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 124,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        children: \"If your contracts compiled and migrated successfully, below will show a stored value of 5 (by default).\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 125,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        children: [\"Try changing the value stored on \", /*#__PURE__*/_jsxDEV(\"strong\", {\n          children: \"line 40\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 130,\n          columnNumber: 46\n        }, this), \" of App.js.\"]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 129,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        children: [\"The stored value is: \", appState.storageValue]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 132,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 121,\n      columnNumber: 9\n    }, this)\n  }, void 0, false);\n};\n\n_s(App, \"M4VLXgbk3bicMH3AflA/1mYOJsI=\");\n\n_c = App;\nexport default App;\n\nvar _c;\n\n$RefreshReg$(_c, \"App\");","map":{"version":3,"sources":["/Users/filipsundgren/Projects/Ethereum/dapp/client/src/App.js"],"names":["React","useState","useEffect","MyStringStore","getWeb3","App","appState","setAppState","storageValue","web3","accounts","contract","setContract","initSetup","eth","getAccounts","networkId","net","getId","deployedNetwork","networks","instance","Contract","abi","address","prevState","runExample","err","console","log","methods","set","send","from","response","get","call"],"mappings":";;;;;;AAAA,OAAOA,KAAP,IAAgBC,QAAhB,EAA0BC,SAA1B,QAA2C,OAA3C,C,CACA;;AACA,OAAOC,aAAP,MAA0B,gCAA1B;AACA,OAAOC,OAAP,MAAoB,WAApB;AAEA,OAAO,WAAP;;AAEA,MAAMC,GAAG,GAAG,MAAM;AAAA;;AACd,QAAM,CAACC,QAAD,EAAWC,WAAX,IAA0BN,QAAQ,CAAC;AACrCO,IAAAA,YAAY,EAAE,CADuB;AAErCC,IAAAA,IAAI,EAAE,IAF+B;AAGrCC,IAAAA,QAAQ,EAAE,IAH2B;AAIrCC,IAAAA,QAAQ,EAAE;AAJ2B,GAAD,CAAxC,CADc,CAOd;AACA;AACA;;AACA,QAAM,CAACA,QAAD,EAAWC,WAAX,IAA0BX,QAAQ,CAAC,OAAD,CAAxC,CAVc,CAYhB;;AACEC,EAAAA,SAAS,CAAC,MAAM;AACZU,IAAAA,WAAW,CAAC,MAAD,CAAX;AACAC,IAAAA,SAAS;AACZ,GAHQ,EAGN,EAHM,CAAT;;AAMA,QAAMA,SAAS,GAAG,YAAY;AAC1B,QAAI;AACF;AACA,YAAMJ,IAAI,GAAG,MAAML,OAAO,EAA1B,CAFE,CAGF;AAEA;;AACA,YAAMM,QAAQ,GAAG,MAAMD,IAAI,CAACK,GAAL,CAASC,WAAT,EAAvB,CANE,CAQF;;AACA,YAAMC,SAAS,GAAG,MAAMP,IAAI,CAACK,GAAL,CAASG,GAAT,CAAaC,KAAb,EAAxB;AACA,YAAMC,eAAe,GAAG,MAAMhB,aAAa,CAACiB,QAAd,CAAuBJ,SAAvB,CAA9B;AACA,YAAMK,QAAQ,GAAG,MAAM,IAAIZ,IAAI,CAACK,GAAL,CAASQ,QAAb,CACrBnB,aAAa,CAACoB,GADO,EAErBJ,eAAe,IAAIA,eAAe,CAACK,OAFd,CAAvB,CAXE,CAeF;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA,YAAMjB,WAAW,CAACkB,SAAS,KAAK,EAC5B,GAAGA,SADyB;AAE5BjB,QAAAA,YAAY,EAAE,CAFc;AAG5BC,QAAAA,IAAI,EAAEA,IAHsB;AAI5BC,QAAAA,QAAQ,EAAEA,QAJkB;AAK5BC,QAAAA,QAAQ,EAAEU;AALkB,OAAL,CAAV,CAAjB;AAOAT,MAAAA,WAAW,CAAC,OAAD,CAAX,CAhDE,CAkDF;;AACAc,MAAAA,UAAU;AACX,KApDD,CAoDE,OAAOC,GAAP,EAAY;AACV;AACAC,MAAAA,OAAO,CAACC,GAAR,CAAY,aAAZ,EAA2BF,GAA3B;AACH;AACJ,GAzDD;;AA4DA,QAAMD,UAAU,GAAG,YAAY;AAC3BE,IAAAA,OAAO,CAACC,GAAR,CAAY,mBAAZ,EAD2B,CAE3B;;AAEAD,IAAAA,OAAO,CAACC,GAAR,CAAY,WAAZ,EAAyBvB,QAAzB;AACAsB,IAAAA,OAAO,CAACC,GAAR,CAAY,YAAZ,EAA0BlB,QAA1B,EAL2B,CAM3B;;AACA,QAAI;AACA;AACA,YAAML,QAAQ,CAACK,QAAT,CAAkBmB,OAAlB,CAA0BC,GAA1B,CAA8B,CAA9B,EAAiCC,IAAjC,CAAsC;AAAEC,QAAAA,IAAI,EAAE3B,QAAQ,CAACI,QAAT,CAAkB,CAAlB;AAAR,OAAtC,CAAN,CAFA,CAIA;;AACA,YAAMwB,QAAQ,GAAG,MAAM5B,QAAQ,CAACK,QAAT,CAAkBmB,OAAlB,CAA0BK,GAA1B,GAAgCC,IAAhC,EAAvB,CALA,CAOA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA7B,MAAAA,WAAW,CAACkB,SAAS,IAAI;AACrB,eAAO,EAAE,GAAGA,SAAL;AAAgBjB,UAAAA,YAAY,EAAE0B;AAA9B,SAAP;AACH,OAFU,CAAX,CAdA,CAiBA;AACH,KAlBD,CAkBE,OAAOP,GAAP,EAAY;AACVC,MAAAA,OAAO,CAACC,GAAR,CAAY,uBAAZ,EAAqCF,GAArC;AACH;AACJ,GA5BD;;AA8BA,sBACE;AAAA,cACC,CAACrB,QAAQ,CAACG,IAAV,gBAAiB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,YAAjB,gBAEC;AAAK,MAAA,SAAS,EAAC,KAAf;AAAA,8BACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,cADF,eAEE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,cAFF,eAGE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,cAHF,eAIE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,cAJF,eAQE;AAAA,qEACmC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,gBADnC;AAAA;AAAA;AAAA;AAAA;AAAA,cARF,eAWE;AAAA,4CAA2BH,QAAQ,CAACE,YAApC;AAAA;AAAA;AAAA;AAAA;AAAA,cAXF;AAAA;AAAA;AAAA;AAAA;AAAA;AAHF,mBADF;AAoBH,CAjID;;GAAMH,G;;KAAAA,G;AAmIN,eAAeA,GAAf","sourcesContent":["import React, { useState, useEffect } from 'react';\n//import Web3 from \"web3\";\nimport MyStringStore from \"./contracts/MyStringStore.json\";\nimport getWeb3 from \"./getWeb3\";\n\nimport \"./App.css\";\n\nconst App = () => {\n    const [appState, setAppState] = useState({\n        storageValue: 0,\n        web3: null,\n        accounts: null,\n        contract: null\n    });\n    // const [storageValue, setStorageValue] = useState(0);\n    // const [web3, setWeb3] = useState(\"\");\n    // const [accounts, setAccounts] = useState(\"\");\n    const [contract, setContract] = useState(\"Nisse\");\n\n  // state = { storageValue: 0, web3: null, accounts: null, contract: null };\n    useEffect(() => {\n        setContract(\"Lars\");\n        initSetup();\n    }, []);\n\n\n    const initSetup = async () => {\n        try {\n          // Get network provider and web3 instance.\n          const web3 = await getWeb3();\n          // console.log(\"get web3: \", web3);\n\n          // Use web3 to get the user's accounts.\n          const accounts = await web3.eth.getAccounts();\n\n          // Get the contract instance.\n          const networkId = await web3.eth.net.getId();\n          const deployedNetwork = await MyStringStore.networks[networkId];\n          const instance = await new web3.eth.Contract(\n            MyStringStore.abi,\n            deployedNetwork && deployedNetwork.address,\n          );\n          // console.log(\"instance: \", instance);\n          // console.log(\"accounts: \", accounts);\n          // console.log(\"web3: \", web3);\n\n          // Set web3, accounts, and contract to the state, and then proceed with an\n          // example of interacting with the contract's methods.\n          // setAppState({\n          //     storageValue: 0,\n          //     web3: web3,\n          //     accounts: accounts,\n          //     contract: instance\n          // });\n          // setAppState(prevState => {\n          //     return { ...prevState, web3: web3 }\n          // });\n          // setAppState(prevState => {\n          //     return { ...prevState, accounts: accounts }\n          // });\n          // setAppState(prevState => {\n          //     return { ...prevState, contract: instance }\n          // });\n          // console.log(\"accounts::\", accountsInit);\n          // setWeb3(web3Init);\n          // setAccounts(accountsInit);\n          // setContract(instance);\n          // console.log(web3, accounts, contract);\n          await setAppState(prevState => ({\n              ...prevState,\n              storageValue: 0,\n              web3: web3,\n              accounts: accounts,\n              contract: instance\n          }));\n          setContract(\"hejdÃ¥\");\n\n          // console.log(\"appState: \", appState);\n          runExample();\n        } catch (err) {\n            // Catch any errors for any of the above operations.\n            console.log(\"error man: \", err);\n        }\n    }\n\n\n    const runExample = async () => {\n        console.log(\"inside runExample\");\n        // const { accounts, contract } = appState;\n\n        console.log(\"loggar:: \", appState);\n        console.log(\"contrac:: \", contract);\n        // Stores a given value, 5 by default.\n        try {\n            // console.log(\"appState: \", appState);\n            await appState.contract.methods.set(5).send({ from: appState.accounts[0] });\n\n            // Get the value from the contract to prove it worked.\n            const response = await appState.contract.methods.get().call();\n\n            // Update state with the result.\n            // setAppState({\n            //     storageValue: response,\n            //     web3: appState.web3,\n            //     accounts: appState.accounts,\n            //     contract: appState.contract\n            // });\n            setAppState(prevState => {\n                return { ...prevState, storageValue: response }\n            });\n            // setStorageValue(response);\n        } catch (err) {\n            console.log(\"error in runExample: \", err);\n        }\n    };\n\n    return(\n      <>\n      {!appState.web3 ? <div>Loading Web3, accounts, and contract...</div>\n        :\n        <div className=\"App\">\n          <h1>Good to Go!</h1>\n          <p>Your Truffle Box is installed and ready.</p>\n          <h2>Smart Contract Example</h2>\n          <p>\n            If your contracts compiled and migrated successfully, below will show\n            a stored value of 5 (by default).\n          </p>\n          <p>\n            Try changing the value stored on <strong>line 40</strong> of App.js.\n          </p>\n          <div>The stored value is: {appState.storageValue}</div>\n        </div>\n        }\n      </>\n    )\n}\n\nexport default App;\n"]},"metadata":{},"sourceType":"module"}