{"ast":null,"code":"import Web3 from \"web3\";\n\nconst getWeb3 = async () => {\n  var res = await new Promise((resolve, reject) => {\n    // Wait for loading completion to avoid race conditions with web3 injection timing.\n    window.addEventListener(\"load\", async () => {\n      // Modern dapp browsers...\n      if (window.ethereum) {\n        console.log(\"window.ethereum\");\n        const web3 = new Web3(window.ethereum);\n        console.log(\"web3::: \", web3);\n\n        try {\n          // Request account access if needed\n          await window.ethereum.enable(); // Acccounts now exposed\n\n          resolve(web3);\n        } catch (err) {\n          console.log(\"error m888: \", err);\n          reject(err);\n        }\n      } // Legacy dapp browsers...\n      else if (window.web3) {\n          // Use Mist/MetaMask's provider.\n          const web3 = window.web3;\n          console.log(\"Injected web3 detected.\");\n          resolve(web3);\n        } // Fallback to localhost; use dev console port by default...\n        else {\n            const provider = new Web3.providers.HttpProvider(\"http://127.0.0.1:8545\");\n            const web3 = new Web3(provider);\n            console.log(\"No web3 instance injected, using Local web3.\");\n            resolve(web3);\n          }\n    });\n  });\n  return res;\n};\n\nexport default getWeb3;","map":{"version":3,"sources":["/Users/filipsundgren/Projects/Ethereum/dapp/client/src/web3/getWeb3.js"],"names":["Web3","getWeb3","res","Promise","resolve","reject","window","addEventListener","ethereum","console","log","web3","enable","err","provider","providers","HttpProvider"],"mappings":"AAAA,OAAOA,IAAP,MAAiB,MAAjB;;AAEA,MAAMC,OAAO,GAAG,YAAY;AACxB,MAAIC,GAAG,GAAG,MAAM,IAAIC,OAAJ,CAAY,CAACC,OAAD,EAAUC,MAAV,KAAqB;AAC7C;AACAC,IAAAA,MAAM,CAACC,gBAAP,CAAwB,MAAxB,EAAgC,YAAY;AACxC;AACA,UAAID,MAAM,CAACE,QAAX,EAAqB;AACjBC,QAAAA,OAAO,CAACC,GAAR,CAAY,iBAAZ;AACA,cAAMC,IAAI,GAAG,IAAIX,IAAJ,CAASM,MAAM,CAACE,QAAhB,CAAb;AACAC,QAAAA,OAAO,CAACC,GAAR,CAAY,UAAZ,EAAwBC,IAAxB;;AACA,YAAI;AACA;AACA,gBAAML,MAAM,CAACE,QAAP,CAAgBI,MAAhB,EAAN,CAFA,CAGA;;AACAR,UAAAA,OAAO,CAACO,IAAD,CAAP;AACH,SALD,CAKE,OAAOE,GAAP,EAAY;AACVJ,UAAAA,OAAO,CAACC,GAAR,CAAY,cAAZ,EAA4BG,GAA5B;AACAR,UAAAA,MAAM,CAACQ,GAAD,CAAN;AACH;AACJ,OAbD,CAcA;AAdA,WAeK,IAAIP,MAAM,CAACK,IAAX,EAAiB;AAClB;AACA,gBAAMA,IAAI,GAAGL,MAAM,CAACK,IAApB;AACAF,UAAAA,OAAO,CAACC,GAAR,CAAY,yBAAZ;AACAN,UAAAA,OAAO,CAACO,IAAD,CAAP;AACH,SALI,CAML;AANK,aAOA;AACD,kBAAMG,QAAQ,GAAG,IAAId,IAAI,CAACe,SAAL,CAAeC,YAAnB,CAAgC,uBAAhC,CAAjB;AACA,kBAAML,IAAI,GAAG,IAAIX,IAAJ,CAASc,QAAT,CAAb;AACAL,YAAAA,OAAO,CAACC,GAAR,CAAY,8CAAZ;AACAN,YAAAA,OAAO,CAACO,IAAD,CAAP;AACH;AACJ,KA9BD;AA+BH,GAjCe,CAAhB;AAmCA,SAAOT,GAAP;AACH,CArCD;;AAwCA,eAAeD,OAAf","sourcesContent":["import Web3 from \"web3\";\n\nconst getWeb3 = async () => {\n    var res = await new Promise((resolve, reject) => {\n        // Wait for loading completion to avoid race conditions with web3 injection timing.\n        window.addEventListener(\"load\", async () => {\n            // Modern dapp browsers...\n            if (window.ethereum) {\n                console.log(\"window.ethereum\");\n                const web3 = new Web3(window.ethereum);\n                console.log(\"web3::: \", web3);\n                try {\n                    // Request account access if needed\n                    await window.ethereum.enable();\n                    // Acccounts now exposed\n                    resolve(web3);\n                } catch (err) {\n                    console.log(\"error m888: \", err);\n                    reject(err);\n                }\n            }\n            // Legacy dapp browsers...\n            else if (window.web3) {\n                // Use Mist/MetaMask's provider.\n                const web3 = window.web3;\n                console.log(\"Injected web3 detected.\");\n                resolve(web3);\n            }\n            // Fallback to localhost; use dev console port by default...\n            else {\n                const provider = new Web3.providers.HttpProvider(\"http://127.0.0.1:8545\");\n                const web3 = new Web3(provider);\n                console.log(\"No web3 instance injected, using Local web3.\");\n                resolve(web3);\n            }\n        });\n    });\n\n    return res;\n};\n\n\nexport default getWeb3;\n"]},"metadata":{},"sourceType":"module"}